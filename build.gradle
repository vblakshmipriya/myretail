plugins {
  id 'org.springframework.boot' version '2.2.4.RELEASE'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'war'
  id 'groovy'
}

group = 'com.world'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
  mavenCentral()
}

sourceSets {
  blackbox {
    groovy.srcDir file('src/fta/groovy')
    resources.srcDir file('src/fta/resources')
    compileClasspath += sourceSets.test.compileClasspath
    runtimeClasspath += sourceSets.test.runtimeClasspath
  }
}

dependencies {
  implementation 'org.apache.httpcomponents:httpclient'
  implementation 'org.codehaus.groovy:groovy'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'io.dropwizard.metrics:metrics-core:3.2.2'
  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testCompile("org.spockframework:spock-core:1.3-groovy-2.5")
}

sourceSets {
  blackbox {
    groovy.srcDir file('src/fta/groovy')
    resources.srcDir file('src/fta/resources')
    compileClasspath += sourceSets.test.compileClasspath
    runtimeClasspath += sourceSets.test.runtimeClasspath
  }
}

task runFtas(type: Test) {
  outputs.upToDateWhen {false}
  description = 'Runs the blackbox tests'
  systemProperties System.properties
  group = 'verification'
  testClassesDirs = sourceSets.blackbox.output.classesDirs
  classpath = sourceSets.blackbox.runtimeClasspath
}

tasks.withType(Test) {Task task ->
  testLogging {
    afterSuite {desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
  reports.junitXml.destination = file("$buildDir/xml/$task.name")
  reports.html.destination = file("$buildDir/reports/$task.name")
}

test.finalizedBy runFtas